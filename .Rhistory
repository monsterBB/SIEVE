array_pol [i,] = sort(X)[knots[i]:(knots[i+1]-1)]-knots[i]
}
}
lin_fun = function(numk){
knots        = seq(x[1], x[2], length.out = numk)
array_lin = array(0, dim = c((length(knots)-1), length(X)/numk))
for (i in 1:length(knots)){
array_lin [i,] = sort(X)[knots[i]:(knots[i+1]-1)]-knots[i]
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
lin_fun(7)
sort(X)[knots[1]:(knots[2]-1)]
sort(X)[knots[1]:(knots[2]-1)]-knots[1]
sort(X)[knots[2]:(knots[3]-1)]-knots[2]
sort(X)[knots[2]:(knots[3]-1)]-sort(X)[knots[2]]
array_lin = array(0, dim = c((length(knots)-1), length(X)/numk))
for (i in 1:length(knots)){
array_lin [i,] = sort(X)[knots[i]:(knots[i+1]-1)]-sort(X)[knots[i]]
}
sort(X)[knots[i]]
sort(X)[knots[i]:(knots[i+1]-1)]
S = sort(X)
for (i in 1:length(knots)){
array_lin [i,knots[i]:(knots[i+1]-1)] = S[knots[i]:(knots[i+1]-1)]-S[knots[i]]
}
length(knots)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
length(X)
knots[1]:(knots[1+1]-1)
knots[2]:(knots[2+1]-1)
knots[3]:(knots[3+1]-1)
knots[4]:(knots[4+1]-1)
knots[5]:(knots[5+1]-1)
knots[6]:(knots[6+1]-1)
knots[7]:(knots[7+1]-1)
205/7
205/5
x            = range(order(X))
knots        = seq(x[1], x[2]+1, length.out = numk)
knots
round(knots)
knots        = seq(x[1], x[2], length.out = numk)
nots
knots
knots
numk       = 5 #number of inner knots
knots        = seq(x[1], x[2], length.out = numk)
knots
knots        = seq(x[1], x[2], length.out = numk+1)
knots
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = S[knots[i]:(knots[i+1]-1)]-S[knots[i]]
}
array_lin
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,6])
lines(X,basis_lin[,7])
basis_lin = t(as.matrix(array_lin))
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,6])
lines(X,basis_lin[,7])
x          = range(order(X))#boundary knots
numk       = 5 #number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+1)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = S[knots[i]:(knots[i+1]-1)]-S[knots[i]]
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,7])
lines(X,basis_lin[,6])
lines(X,basis_lin[,5])
lines(X,basis_lin[,4])
lines(X,basis_lin[,3])
length(knots)
k          = 5 #number of inner knots
length(knots)
knots
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-2), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = S[knots[i]:(knots[i+1]-1)]-S[knots[i]]
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
lines(X,basis_lin[,6])
basis_lin
lin_fun(k)
k          = 5#number of inner knots
lin_fun(k)
k          = 5#number of inner knots
numk         = 5#number of inner knots
x            = range(order(X))
x
knots        = seq(x[1], x[2], length.out = numk+2)
knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = S[knots[i]:(knots[i+1]-1)]-S[knots[i]]
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
lin_fun(k)
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,6])
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])/((knots[i+1])-knots[i])
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,6])
knots[3+1]-knots[3]
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])/(knots[i+1]-knots[i])
}
basis_lin = t(as.matrix(array_lin))
return(basis_lin)
}
lin_fun(k)
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])/(knots[i+1]-knots[i])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,1],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,6])
plot(X,basis_lin[,1],"l")
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
model.linsp = lm ( logwage ~ basis_lin, data = cps71)
model.linsp = lm ( logwage ~ basis_lin, data = cps71)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.linsp),  col = "blue", lwd = 2, main = "linear Spline")
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
+ (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])^2
}
basis = t(as.matrix(array_lin))
return(basis)
}
#
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
x          = range(order(X))#boundary knots
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
+ (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])^2
}
basis = t(as.matrix(array_lin))
return(basis)
}
#
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
model.linsp = lm ( logwage ~ basis_lin, data = cps71)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.linsp),  col = "blue", lwd = 2, main = "linear Spline")
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.linsp),  col = "blue", lwd = 2, main = "linear Spline")
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
x          = range(order(X))#boundary knots
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])^2
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
plot(X,basis1[,1],"l")
lines(X,basis1[,2])
lines(X,basis1[,3])
lines(X,basis1[,4])
lines(X,basis1[,5])
lines(X,basis1[,6])
lines(X,basis1[,7])
model.linsp = lm ( logwage ~ basis_lin, data = cps71)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.linsp),  col = "blue", lwd = 2, main = "linear Spline")
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", x="",y="",main = "basis functions of linear spline")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
plot(X,basis_lin[,6],"l", x="",y="",main = "basis functions of linear spline")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "basis functions of linear spline")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
par(mfrow = c(1,3))
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.lr),  col = "blue", lwd = 2, main = "linear regression")
lines(cps71$age, fitted(model.np),  col = "red", lwd = 2, main = "Kernel smoother" )
lines(model.lp, col = " green", lwd = 2, main = "local polynomial fitting")
#plot the results
par(mfrow = c(1,3))
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.lr),  col = "blue", lwd = 2, main = "linear regression")
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.np),  col = "red", lwd = 2, main = "Kernel smoother" )
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(model.lp, col = " green", lwd = 2, main = "local polynomial fitting")
plot(cps71$age, cps71$logwage,  cex=.9)
plot(cps71$age, cps71$logwage,  cex=.9, main = "linear regression" , xlab = "", ylab="")
plot(cps71$age, cps71$logwage,  cex=.9, main = "linear regression" , xlab = "", ylab="")
lines(cps71$age, fitted(model.lr),  col = "blue", lwd = 2)
plot(cps71$age, cps71$logwage,  cex=.9, main = "Kernel smoother" , xlab = "", ylab="")
lines(cps71$age, fitted(model.np),  col = "red", lwd = 2)
plot(cps71$age, cps71$logwage,  cex=.9, main = "local polynomial fitting" , xlab = "", ylab="")
lines(model.lp, col = " green", lwd = 2)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.Bspline3), lty = 1, col = "green", lwd = 2)
lines(cps71$age, fitted(model.Bspline2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.Bspline1), lty = 1, col = "red", lwd = 2)
legend(22,15, c("D=3","D=10","D=25"),lty = 1 ,fill=c("red","blue","green"),cex=0.8)
#plot the results
par(mfrow = c(1,1))
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.Bspline3), lty = 1, col = "green", lwd = 2)
lines(cps71$age, fitted(model.Bspline2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.Bspline1), lty = 1, col = "red", lwd = 2)
legend(22,15, c("D=3","D=10","D=25"),lty = 1 ,fill=c("red","blue","green"),cex=0.8)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.Bspline3), lty = 1, col = "green", lwd = 2)
lines(cps71$age, fitted(model.Bspline2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.Bspline1), lty = 1, col = "red", lwd = 2)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.pol1), lty = 1, col = "red", lwd = 2)
lines(cps71$age, fitted(model.pol2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.pol3), lty = 1, col = "green", lwd = 2)
plot(cps71$age, cps71$logwage, xlab = "", ylab = "", cex=.9)
lines(cps71$age, fitted(model.pol1), lty = 1, col = "red", lwd = 2)
lines(cps71$age, fitted(model.pol2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.pol3), lty = 1, col = "green", lwd = 2)
plot(cps71$age, cps71$logwage, xlab = "", ylab = "", cex=.9)
lines(cps71$age, fitted(model.Bspline3), lty = 1, col = "green", lwd = 2)
lines(cps71$age, fitted(model.Bspline2), lty = 1, col = "blue", lwd = 2)
lines(cps71$age, fitted(model.Bspline1), lty = 1, col = "red", lwd = 2)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
x          = range(order(X))#boundary knots
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
data("cps71")
X = cps71$age
Y = cps71$logwage
library("np")
library(MASS)
library('fda')
library(basefun)
library("KernSmooth")
data("cps71")
X = cps71$age
Y = cps71$logwage
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
model.linsp = lm ( logwage ~ basis_lin, data = cps71)
plot(cps71$age, cps71$logwage, xlab = "age", ylab = "log(wage)", cex=.9)
lines(cps71$age, fitted(model.linsp),  col = "blue", lwd = 2, main = "linear Spline")
library("np")
library(MASS)
library('fda')
library(basefun)
library("KernSmooth")
data("cps71")
X = cps71$age
Y = cps71$logwage
x          = range(order(X))#boundary knots
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
x
k
knots        = seq(x[1], x[2], length.out = numk+2)
seq(x[1], x[2], length.out = 7)
order(X)
range(sort(X))
S[knots]
S = sort(X)
knots = seq(x[1], x[2], length.out = 7)
S[knots]
S = sort(X)
knots = seq(x[1], x[2], length.out = 5)
S[knots]
x          = range(order(X))#boundary knots
k         = 3#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
length(knots)
x          = range(order(X))#boundary knots
k         = 5#number of inner knots
lin_fun = function(numk){
x            = range(order(X))
knots        = seq(x[1], x[2], length.out = numk+2)
array_lin = array(0, dim = c((length(knots)-1), length(X)))
S = sort(X)
for (i in 1:(length(knots)-1)){
array_lin [i,knots[i]:(knots[i+1]-1)] = (S[knots[i]:(knots[i+1]-1)]-S[knots[i]])
}
basis = t(as.matrix(array_lin))
return(basis)
}
basis_lin = lin_fun(k)
plot(X,basis_lin[,6],"l", xlab="",ylab="",main = "")
lines(X,basis_lin[,2])
lines(X,basis_lin[,3])
lines(X,basis_lin[,4])
lines(X,basis_lin[,5])
lines(X,basis_lin[,1])
S[knots]
S = sort(X)
knots = seq(x[1], x[2], length.out = 7)
S[knots]
rm(list = ls())
library("np")
library(MASS)
library('fda')
library(basefun)
library("KernSmooth")
k         = 6 #number of inner knots
